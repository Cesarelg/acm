// BEGIN CUT HERE

// END CUT HERE
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cmath>
using namespace std;
/*
vector<string> split( const string& s, const string& delim =" " ) {
    vector<string> res;
    string t;
    for ( int i = 0 ; i != s.size() ; i++ ) {
        if ( delim.find( s[i] ) != string::npos ) {
            if ( !t.empty() ) {
                res.push_back( t );
                t = "";
            }
        } else {
            t += s[i];
        }
    }
    if ( !t.empty() ) {
        res.push_back(t);
    }
    return res;
}

vector<int> splitInt( const string& s, const string& delim =" " ) {
    vector<string> tok = split( s, delim );
    vector<int> res;
    for ( int i = 0 ; i != tok.size(); i++ )
        res.push_back( atoi( tok[i].c_str() ) );
    return res;
}

// BEGIN CUT HERE
#define ARRSIZE(x) (sizeof(x)/sizeof(x[0]))

template<typename T> void print( T a ) {
    cerr << a;
}
static void print( long long a ) {
    cerr << a << "L";
}
static void print( string a ) {
    cerr << '"' << a << '"';
}
template<typename T> void print( vector<T> a ) {
    cerr << "{";
    for ( int i = 0 ; i != a.size() ; i++ ) {
        if ( i != 0 ) cerr << ", ";
        print( a[i] );
    }
    cerr << "}" << endl;
}
template<typename T> void eq( int n, T have, T need ) {
    if ( have == need ) {
        cerr << "Case " << n << " passed." << endl;
    } else {
        cerr << "Case " << n << " failed: expected ";
        print( need );
        cerr << " received ";
        print( have );
        cerr << "." << endl;
    }
}
template<typename T> void eq( int n, vector<T> have, vector<T> need ) {
    if( have.size() != need.size() ) {
        cerr << "Case " << n << " failed: returned " << have.size() << " elements; expected " << need.size() << " elements.";
        print( have );
        print( need );
        return;
    }
    for( int i= 0; i < have.size(); i++ ) {
        if( have[i] != need[i] ) {
            cerr << "Case " << n << " failed. Expected and returned array differ in position " << i << ".";
            print( have );
            print( need );
            return;
        }
    }
    cerr << "Case " << n << " passed." << endl;
}
static void eq( int n, string have, string need ) {
    if ( have == need ) {
        cerr << "Case " << n << " passed." << endl;
    } else {
        cerr << "Case " << n << " failed: expected ";
        print( need );
        cerr << " received ";
        print( have );
        cerr << "." << endl;
    }
}*/
// END CUT HERE
class TeamContest {
public:
    int worstRank(vector <int> strength) {
        int dat = max(max(strength[0], strength[1]), strength[2]) +
                  min(min(strength[0], strength[1]), strength[2]);
        int n = strength.size() / 3;
        vector<int> a;
        a.clear();
        for (int i = 3; i < n*3; ++i)
            a.push_back(strength[i]);
        sort(a.begin(), a.end());
        bool use[100];
        memset(use, 0, sizeof(use));
        int ans = 0;
        for (int i = a.size()-1; i >= 0; --i) {
            int cnt = 0;
            for (int j = 0; j < i; ++j)
                if (!use[j] && a[j] + a[i] > dat) ++cnt;
            if (cnt < 2) break;
            ++ans;
            cnt = 0;
            for (int j = 0; j < i; ++j)
                if (!use[j] && a[j]+a[i]>dat) {
                    ++cnt;
                    use[j] = 1;
                    if (cnt == 2) break;
                }
        }
        return ans + 1;
    }

};
/*
// BEGIN CUT HERE
int main( int argc, char* argv[] ) {
    {
        int strengthARRAY[] = {9,3,4,1,1,1,2,3,4,5,6,6,6,8,9};
        vector <int> strength( strengthARRAY, strengthARRAY+ARRSIZE(strengthARRAY) );
        TeamContest theObject;
        eq(0, theObject.worstRank(strength),3);
    }
    {
        int strengthARRAY[] = {5, 7, 3}
           ;
        vector <int> strength( strengthARRAY, strengthARRAY+ARRSIZE(strengthARRAY) );
        TeamContest theObject;
        eq(1, theObject.worstRank(strength),1);
    }
    {
        int strengthARRAY[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
        vector <int> strength( strengthARRAY, strengthARRAY+ARRSIZE(strengthARRAY) );
        TeamContest theObject;
        eq(2, theObject.worstRank(strength),1);
    }
    {
        int strengthARRAY[] = {3,9,4,6,2,6,1,6,9,1,4,1,3,8,5}
           ;
        vector <int> strength( strengthARRAY, strengthARRAY+ARRSIZE(strengthARRAY) );
        TeamContest theObject;
        eq(3, theObject.worstRank(strength),3);
    }
    {
        int strengthARRAY[] = {53,47,88,79,99,75,28,54,65,14,22,13,11,31,43}
           ;
        vector <int> strength( strengthARRAY, strengthARRAY+ARRSIZE(strengthARRAY) );
        TeamContest theObject;
        eq(4, theObject.worstRank(strength),3);
    }
    return 0;
}
// END CUT HERE
*/
