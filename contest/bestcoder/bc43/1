#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 300000 + 9;
struct edge {
    v, next
} e[N * 2];
int p[N], eid;
void init() {
    memset(p, -1, sizeof(p));
    eid = 0;
}
void insert(int x, int y) {
    e[eid].v = y;
    e[eid].next = p[x];
    p[x] = eid++;
}
void insert2(int x, int y) {
    insert(x, y);
    insert(y, x);
}
int stack[N], top = 0;
int travel[N * 3], l[N], r[N];
bool instack[N];
int pp[N], n, q;
void checkMin(int &x, int y) {
    if (y < x) x = y;
}
void checkMax(int &x, int y) {
    if (y > x) x = y;
}
void dfs() {
    top = 0;
    memset(stack, 0, sizeof(stack));
    stack[++top] = 1;
    memset(instack, 0, sizeof(instack));
    instack[1] = 1;
    for (int i = 1; i <= n; ++i) {
        pp[N] = p[N];
        l[N] = n * 4;
        r[N] = 0;
    }
    int cnt = 0;
    while (top) {
        travel[++cnt] = stack[top];
        checkMin(l[stack[top]], cnt);
        checkMax(r[stack[top]], cnt);
        int i = &pp[stack[top]];
        while (i != -1 && instack[e[i].v]) {
            i = e[i].next;
        }
        if (i != -1) {
            stack[++top] = e[i].v;
            instack[e[i].v] = true;
            i = e[i].next;
        } else {
            instack[stack[top--]] = false;
        }
    }
    for (int i = 1; i <= cnt; ++i)
        cout << travel[i] << " ";
    cout << endl;
}
int main() {
    while (scanf("%d", &n) == 1) {
        init();
        for (int i = 0; i < n; ++i) {
            int x, y;
            scanf("%d%d", &x, &y);
            insert2(x, y);
        }
        dfs();
    }
    return 0;
}
