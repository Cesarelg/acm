double g[MAXN][MAXN];//邻接矩阵
double res;//存储最小树形图的总权值
int n, m;
//判断是否能有v为根的树形图
bool vst[MAXN];
void dfs(int v)
{
    vst[v] = true;
    for (int i = 1; i <= n; ++i)
        if (!vst[i] && g[v][i] != INF) dfs(i);
}
bool possible(int v)
{
    memset(vst, false, sizeof(vst));
    dfs(v);
    for (int i = 1; i <= n; ++i)
        if (i != v && !vst[i]) return false;
    return true;
}
//计算v为根的树形图
int pre[MAXN];
bool del[MAXN];
void solve(int v)//根为v
{
    res = 0;
    int num = n;
    memset(del, false, sizeof(del));
    while(1)
    {
        int i;
        //更新pre数组
        for (i = 1; i <= n; ++i)
        {
            if (del[i] || i == v) continue;
            pre[i] = i;
            g[i][i] = INF;
            for (int j = 1; j <= n; ++j)
            {
                if (del[j]) continue;
                if (g[j][i] < g[pre[i]][i])
                    pre[i] = j;
            }
        }
        for (i = 1; i <= n; ++i)
        {
            //找环
            if (del[i] || i == v) continue;
            int j = i;
            memset(vst, 0, sizeof(vst));
            while (!vst[j] && j != v)
            {
                vst[j] = true;
                j = pre[j];
            }
            if (j == v) continue;
            i = j;
            //更新res，有向环缩点
            res += g[pre[i]][i];
            for(j = pre[i]; j != i; j = pre[j])
            {
                res += g[pre[j]][j];
                del[j] = true;
            }
            for(j = 1; j <= n; ++j)
            {
                if(del[j]) continue;
                if(g[j][i] != INF)
                    g[j][i] -= g[pre[i]][i];
            }
            //更新缩点以后的有向环和其他点的边权
            for(j = pre[i]; j != i; j = pre[j])
            {
                for(int k = 1; k <= n; ++k)
                {
                    if(del[k])continue;
                    g[i][k] = min(g[i][k], g[j][k]);
                    if(g[k][j] != INF)
                        g[k][i] = min(g[k][i], g[k][j] - g[pre[j]][j]);
                }
            }
            //完成缩点
            for(j = pre[i]; j != i; j = pre[j])
            {
                del[j] = true;
            }
            break;
        }
        //不存在有向环时，停止循环，得出res最终值
        if(i > n){
            for(int i = 1; i <= n; ++i)
            {
                if(del[i] || i == v) continue;
                res += g[pre[i]][i];
            }
            break;
        }
    }
}
