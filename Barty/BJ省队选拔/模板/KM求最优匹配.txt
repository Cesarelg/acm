int map[MAX_N][MAX_N];//邻接矩阵
int n;//最大节点数
int lx[MAX_N], ly[MAX_N];//标号
bool vx[MAX_N], vy[MAX_N];//记录是否访问
int match[MAX_N];//存储匹配结果
bool path(int x)
{
    vx[x] = true;
    for (int y = 1; y <= n; ++y)
        if (!vy[y] && lx[x] + ly[y] == map[x][y])
        {
            vy[y] = true;
            if (match[y] == -1 || path(match[y]))
            {
                match[y] = x;
                return true;
            }
        }
    return false;
}
int bestmatch(bool maxsum)//maxsum为真则为求最大值，为假则求最小值
{
    int i, j;
    if (!maxsum)
    {
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= n; ++j)
                map[i][j] = -map[i][j];
    }
    for (int i = 1; i <= n; ++i)
    {
        lx[i] = -0x1fffffff;
        ly[i] = 0;
        for (int j = 1; j <= n; ++j)
            lx[i] = max(lx[i], map[i][j]);
    }
    memset(match, -1, sizeof(match));
    for (int i = 1; i <= n; ++i)
        while (1)
        {
            memset(vx, false, sizeof(vx));
            memset(vy, false, sizeof(vy));
            if (path(i)) break;
            int dx = 0x7fffffff;
            for (int i = 1; i <= n; ++i)
                if (vx[i])
                    for (int j = 1; j <= n; ++j)
                        if (!vy[j])
                            dx = min(lx[i] + ly[j] - map[i][j], dx);
            for (int i = 1; i <= n; ++i)
            {
                if (vx[i]) lx[i] -= dx;
                if (vy[i]) ly[i] += dx;
            }
        }
    int sum = 0;
    for (int i = 1; i <= n; ++i)
        sum += map[match[i]][i];
    if (!maxsum)
    {
        sum = -sum;
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= n; ++j)
                map[i][j] = -map[i][j];
    }
    return sum;
}
