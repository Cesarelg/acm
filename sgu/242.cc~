// =====================================================================================
// 
//       Filename:  242.cc
// 
//    Description:  最大流，dinic算法
// 
//        Version:  1.0
//        Created:  2013年05月24日 14时45分09秒
//       Revision:  none
//       Compiler:  g++
// 
//         Author:  Boyang Yang (barty), maiL@barty.ws
//        Company:  http://barty.ws
// 
// =====================================================================================


#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
using namespace std;
template <typename T> void checkMin(T &a, const T &b) { if (b < a) a = b; }
template <typename T> void checkMax(T &a, const T &b) { if (b > a) a = b; }

const int N = 1000 + 9;
const int M = 100000 + 9;
const int inf = 1000000000;

struct edge {
    int v, f, next;
} e[M];
int p[N], eid;
void init() {
    memset(p, -1, sizeof(p));
    eid = 0;
}
void insert(int x, int y, int f) {
    e[eid].v = y;
    e[eid].f = f;
    e[eid].next = p[x];
    p[x] = eid++;
}
void insert2(int x, int y, int f) {
    insert(x, y, f); insert(y, x, 0);
}
int dist[N], source, sink, n;
bool bfs() {
    memset(dist, -1, sizeof(dist));
    static int q[N], l, r;
    l = r = 0;
    q[r++] = sink;
    dist[sink] = n;
    for (; l-r; ) {
        int now = q[l++];
        for (int i = p[now]; ~i; i = e[i].next)
            if (e[i^1].f && dist[e[i].v] == -1) {
                dist[e[i].v] = dist[now] - 1;
                q[r++] = e[i].v;
                if (e[i].v == source) return true;
            }
    }
    return false;
}
int dfs(int v, int f) {
    if (v == sink) return f;
    int tmp = 0;
    for (int i = p[v]; ~i; i = e[i].next)
        if (e[i].f && dist[v] + 1 == dist[e[i].v]) {
            int delta = dfs(e[i].v, min(f - tmp, e[i].f));
            tmp += delta;
            e[i].f -= delta;
            e[i^1].f += delta;
        }
    return tmp;
}
int maxflow() {
    int ret = 0;
    while (bfs()) {
        ret += dfs(source, inf);
    }
    return ret;
}

bool vst[N];

int main (int argc, char *argv[]) {
    int m, nn;
    while (scanf("%d%d", &n, &m) == 2) {
        init();
        nn = n;
        source = n + m + 1, sink = n + m + 2;
        for (int i = 1; i <= n; ++i) {
            int k, x; scanf("%d", &k);
            while (k--) {
                scanf("%d", &x);
                insert2(i, n+x, 1);
            }
            insert2(source, i, 1);
        }
        for (int i = 1; i <= m; ++i) insert2(i+n, sink, 2);
        n = sink;
        int ans = maxflow();
        n = nn;
        if (ans != m*2) puts("NO");
        else {
            puts("YES");
            vector<int> ans[N];
            memset(vst, 0, sizeof(vst));
            for (int i = 1; i <= m; ++i) {
                ans[i].clear();
                for (int j = p[i+n]; ~j; j = e[j].next)
                    if (e[j].v <= n && e[j].f) {
                        ans[i].push_back(e[j].v);
                        vst[e[j].v] = 1;
                    }
            }
            for (int i = 1; i <= n; ++i)
                if (!vst[i])
                    for (int j = p[i]; ~j; j = e[j].next)
                        if (e[j].v <= n + m) {
                            ans[e[j].v-n].push_back(i);
                            break;
                        }
            for (int i = 1; i <= m; ++i) {
                printf("%d", (int)ans[i].size());
                sort(ans[i].begin(), ans[i].end());
                for (int j = 0; j < (int)ans[i].size(); ++j)
                    printf(" %d", ans[i][j]);
                puts("");
            }


        }
    }
    return 0;
}
