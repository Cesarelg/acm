namespace gauss {//高斯消元double模板
    const double eps = 1e-12;
    inline int sgn(double x) { return (x > eps) - (x < -eps); }
    int gauss(double a[12][12], int n, double ans[12]) {//a矩阵为系数矩阵(0下标开始)，ans为计算结果
        int i, j, k, max_r, col, free_x_num, free_index, equ = n, var = n;//equ为等式个数，var为变量个数
        double temp;
        bool free_x[12];
        col = 0;
        memset(free_x, 1, sizeof(free_x));
        for (k = 0; k < equ && col < var; k++, col++) {
            max_r = k;
            for (i = k + 1; i < equ; i++) {
                if (sgn(fabs(a[i][col]) - fabs(a[max_r][col]))>0) max_r = i;
            }
            if (max_r != k) {
                for (j = k; j < var + 1; j++) swap(a[k][j], a[max_r][j]);
            }
            if (sgn(a[k][col]) == 0 ) {
                k--; continue;
            }
            for (i = k + 1; i < equ; i++) {
                if (sgn(a[i][col]) != 0) {
                    double t = a[i][col] / a[k][col];
                    for (j = col; j < var + 1; j++) {
                        a[i][j] = a[i][j] - a[k][j] * t;
                    }
                }
            }
        }
        if (k < var) {
            for (i = k - 1; i >= 0; i--) {
                free_x_num = 0;
                for (j = 0; j < var; j++) {
                    if ( sgn(a[i][j]) != 0 && free_x[j]) {
                        free_x_num++, free_index = j;
                    }
                }
                if(free_x_num > 1) continue;
                temp = a[i][var];
                for (j = 0; j < var; j++) {
                    if (sgn(a[i][j]) != 0 && j != free_index) temp -= a[i][j] * ans[j];
                }
                ans[free_index] = temp / a[i][free_index];
                free_x[free_index] = 0;
            }
            return var - k;
        }
        for (i = var - 1; i >= 0; i--) {
            temp = a[i][var];
            for (j = i + 1; j < var; j++) {
                if (sgn(a[i][j]) != 0) temp -= a[i][j] * ans[j];
            }
            ans[i] = temp / a[i][i];
        }
        return 0;
    }
}