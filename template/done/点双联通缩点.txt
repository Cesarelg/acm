#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#define maxn 300
#define clr(x) memset(x, 0, sizeof(x))
using namespace std;
struct edge {
    int v, d, next;
}e[maxn*maxn];
int p[maxn], eid;
void mapinit() {
    memset(p, -1, sizeof(p));
    eid = 0;
}
void insert(int x, int y) {
    e[eid].v = y;
    e[eid].next = p[x];
    p[x] = eid++;
}
void checkmin(int &x, int y) {
    if (y < x) x = y;
}
int dfn[maxn], low[maxn], stack[maxn], top, dindex, circnt, n, belong[maxn];
vector<int> cir[maxn];
bool iscut[maxn];
int rootcnt;
void dfs(int v, int last) {
    dfn[v] = low[v] = ++dindex;
    stack[++top] = v;
    for (int i = p[v]; i != -1; i = e[i].next) {
        if (e[i].v == last) continue;
        if (dfn[e[i].v]) checkmin(low[v], dfn[e[i].v]);
        else {
/*            if (last == -1) {
                if (++rootcnt > 1) iscut[v] = 1;
            } else iscut[v] = 1;
            GG: 这段你在干什么，这样的话，所有点都是割点？
            */
            dfs(e[i].v, v);
            checkmin(low[v], low[e[i].v]);
            if (low[e[i].v] >= dfn[v]) {
                //GG add below
                iscut[v] = 1;
                //GG add above
                ++circnt;
                int t;
                vector<int> now; now.clear();
                do {
                    t = stack[top--];
                    now.push_back(t);
                    belong[t] = circnt;
                } while (t != e[i].v);
                now.push_back(v);/*
                cout << "  " << now.size() << ": ";
                for (int k = 0; k < now.size(); ++k) {
                    cout << now[k] << " ";
                } cout << endl;*/
                cir[circnt] = now;
                belong[v] = circnt;
            }
        }
    }
}
void solve() {
    clr(belong); clr(dfn); clr(low); dindex = 0; top = 0; circnt = 0;
    for (int i = 1; i <= n; ++i)
        if (!dfn[i]) {
            rootcnt = 0;
            dfs(i, -1);
        }
}
void print_map() {
    for (int i = 1; i <= n; ++i) {
        printf("%d: ", i);
        for (int j = p[i]; j != -1; j = e[j].next)
            printf("%d,", e[j].v);
        puts("");
    }
}
int m, s, d;
int g[maxn][maxn], hasht[maxn], w[maxn], f[maxn];
bool vst[maxn];
void dfs2(int v, int l) {
    vst[v] = 1;
    f[v] = l;
    for (int i = p[v]; i != -1; i = e[i].next)
        if (!vst[e[i].v]) {
            dfs2(e[i].v, l + w[e[i].v]);
        }
}
int main() {
    while (scanf("%d%d%d%d", &n, &m, &s, &d) == 4) {
        int orin = n;
        clr(g);
        clr(iscut); // GG ADDED
        ++s; ++d;
        for (int i = 1; i <= m; ++i) {
            int x, y; scanf("%d%d", &x, &y);
            g[x+1][y+1] = g[y+1][x+1] = 1;
        }
        if (s == d) {
            printf("%d\n", n - 1);
            continue;
        }
        mapinit();
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= n; ++j)
                if (g[i][j]) insert(i, j);
        solve();
        int now = 0;
        clr(g); clr(w);
        for (int i = 1; i <= n; ++i) {
            if (iscut[i]) hasht[i] = circnt + (++now);
            w[hasht[i]] = -1;
        }
        for (int i = 1; i <= circnt; ++i)
            w[i] = cir[i].size();
        int canReach = 0; /* GG added */
        if (iscut[s]) s = hasht[s], /*GG added*/canReach++;
        else s = belong[s];
        if (iscut[d]) d = hasht[d], /*GG added*/canReach++;
        else d = belong[d];
        for (int i = 1; i <= circnt; ++i)
            for (int j = 0; j < cir[i].size(); ++j)
                if (iscut[cir[i][j]]) g[i][hasht[cir[i][j]]] = g[hasht[cir[i][j]]][i] = 1;
        mapinit();
        n = circnt + now;
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= n; ++j)
                if (g[i][j]) insert(i, j);
        clr(vst); clr(f); dfs2(s, w[s]);
        canReach += f[d];//GG added
        cout << orin - canReach << endl;
        //printf("%d\n", orin - f[d]); GG deleted
    }
    return 0;
}