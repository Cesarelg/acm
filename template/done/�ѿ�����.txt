int n;
struct Node{
    int mkey, akey;//mkeyÂú×ãÅÅĞòĞÔ£¬akeyÂú×ã¶ÑĞÔ
    bool operator < (Node b) const {
        return mkey < b.mkey;
    }
} a[maxn];

int stack[maxn];
int fa[maxn], ch[maxn][2];
void Build_Cartesian_Tree() {
    int i, k, top = 0;
    stack[0] = 0; // As the father of root;
    for(i = 1; i <= n; ++i) {
        k = top;
        while( k > 0 && a[stack[k]].akey > a[i].akey ) --k;
        if( top == k ){
            fa[i]= stack[k];
            stack[++k]= i;
        }
        else if( top > k ){
            fa[ stack[k+1] ] = i;
            fa[i] = stack[k];
            stack[++k] = i;
        }
        top = k;
    }
    for(i = 1; i <= n; ++i) ch[i][0] = ch[i][1] = 0;
    for(i = 1; i <= n; ++i) {
        if( a[ fa[i] ].mkey > a[i].mkey ) ch[ fa[i] ][0] = i;
        else ch[ fa[i] ][1] = i;
    }
}