double dat[N][N];
double dist[N];
bool vst[N];
bool instack[N];
struct edge
{
    int v, next;
    double d;
}e[N * N];
int p[N], eid;
void mapinit()
{
    eid = 0;
    memset(p, -1, sizeof(p));
}
void insert(int x, int y, double d)
{
    e[eid].v = y;
    e[eid].d = d;
    e[eid].next = p[x];
    p[x] = eid++;
}
bool DFS_SPFA(int v)
{
    vst[v] = true;
    instack[v] = true;
    bool res = false;
    for (int i = p[v]; i != -1; i = e[i].next)
        if (dist[v] + e[i].d < dist[e[i].v])
        {
            dist[e[i].v] = dist[v] + e[i].d;
            if (!instack[e[i].v])
            {
                if (DFS_SPFA(e[i].v)) res = true;
            }
            else res = true;
            if (res) break;
        }
    instack[v] = false;
    return res;
}
bool HasCircle()
{
    memset(dist, 0, sizeof(dist));
    memset(instack, false, sizeof(instack));
    memset(vst, false, sizeof(vst));
    for (int i = 1; i <= n; ++i)
        for (int j = p[i]; j != -1; j = e[j].next)
            if (dist[i] + e[j].d < dist[e[j].v]) dist[e[j].v] = dist[i] + e[j].d;
    for (int i = 1; i <= n; ++i)
        if (!vst[i] && DFS_SPFA(i)) return true;
    return false;
}
