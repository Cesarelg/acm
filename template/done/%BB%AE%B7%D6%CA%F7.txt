#include<cstdio>
#include<string>
#include<vector>
#include<algorithm>
#define N 100009
using namespace std;
int n, arr[N], od[N], lfnum[20][N], val[20][N];
bool cmp(const int &x, const int &y){ return arr[x] < arr[y]; }
void build(int l,int r,int d) {
    if(l == r) return;
    int mid = (l + r) >> 1, p = 0;
    for(int i = l; i <= r; i++) {
        if(val[d][i] <= mid) {
            val[d + 1][l + p] = val[d][i];
            lfnum[d][i] = ++p;
        }
        else {
            lfnum[d][i] = p;
            val[d + 1][mid + i + 1 - l - p] = val[d][i];
        }
    }
    build(l, mid, d + 1);
    build(mid + 1, r, d + 1);
}
int query(int s, int e, int k, int l = 1, int r = n, int d = 0) {
    if(l == r) return l;
    int mid = (l + r) >> 1, ss, ee;
    ss = (s == l ? 0 : lfnum[d][s - 1]);
    ee = lfnum[d][e];
    if(ee - ss >= k) return query(l + ss, l + ee - 1, k, l, mid, d + 1);
    return query(mid + 1 + (s - l - ss), mid + 1 + (e - l - ee), k - (ee - ss), mid + 1, r, d + 1);
}
int main() {
    int ca = 0, m, l, r;
    while(scanf("%d", &n) == 1) {
        printf("Case %d:\n", ++ca);
        for(int i = 1; i <= n; i++) scanf("%d", arr+i), od[i]=i;
        sort(od + 1, od + n + 1, cmp);
        for(int i = 1; i <= n; i++) val[0][od[i]] = i;
        build(1, n, 0);
        scanf("%d", &m);
        while(m--) {
            int num, k;
            scanf("%d%d", &l, &r);
            k = (r - l) / 2 + 1;
            num = query(l, r, k);
            int ans = arr[od[num]];
            printf("%d\n", ans);
        }
    }
    return 0;
}
