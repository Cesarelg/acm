struct LCA {
    struct edge { int v, next; }e[M];
    int p[N], eid, n, fa[N][LOGN], deep[N];
    bool vst[N], isrt[N];
    void init() { clx(p); eid = 0; clr(vst); clr1(isrt); }
    void insert(int x, int y) {
        e[eid].v = y; e[eid].next = p[x]; p[x] = eid++;
    }
    void insert2(int x, int y) {
        insert(x, y); insert(y, x);
    }
    void build(int now, int dp) {
        deep[now] = dp; vst[now] = 1;
        for (int i = p[now]; i != -1; i = e[i].next)
            if (!vst[e[i].v]) {
                fa[e[i].v][0] = now;
                build(e[i].v, dp+1);
            }
    }
    void read() {
        int x, y; init();
        scanf("%d", &n);
        for (int i = 1; i < n; ++i) {
            scanf("%d%d", &x, &y);
            insert(x, y); isrt[y] = 0;
        }
        for (int i = 1; i <= n; ++i)
            if (isrt[i]) {
                build(i, 0); fa[i][0] = i;
            }
        for (int i = 1; i < LOGN; ++i)
            for (int j = 1; j <= n; ++j)
                fa[j][i] = fa[fa[j][i-1]][i-1];
    }
    void gao(int &x, int dp) {
        int j = LOGN - 1;
        while (deep[x] != dp) {
            while (deep[fa[x][j]] < dp) --j;
            x = fa[x][j];
        }
    }
    int query(int x, int y) {
        if (deep[x] < deep[y]) swap(x, y);
        if (deep[x] != deep[y]) gao(x, deep[y]);
        if (x == y) return x;
        int j = LOGN - 1;
        while (fa[x][0] != fa[y][0]) {
            while (fa[x][j] == fa[y][j]) --j;
            x = fa[x][j]; y = fa[y][j];
        }
        return fa[x][0];
    }
};