struct node
{
    int v;
    double d;
    friend bool operator < (node n1, node n2)
    {
        return n1.d > n2.d;
    }
    node (int a, double b)
    {
        v = a, d = b;
    }
};
priority_queue<node> q;
double d[MAXN];
bool use[MAXN];
int n;
void prim(int v)
{
    memset(d, 0x7f, sizeof(d));
    memset(use, false, sizeof(use));
    while (!q.empty()) q.pop();
    d[v] = 0;
    q.push(node(v, 0));
    for (int i = 1; i <= n; ++i)
    {

        int mv = q.top().v, ms = q.top().d;
        while (use[mv])
        {
            q.pop();
            mv = q.top().v, ms = q.top().d;
        }
        q.pop();
        use[mv] = true;
        for (int j = p[mv]; j != -1; j = e[j].next)
            if (d[e[j].v] > e[j].d && !use[e[j].v])
            {
                q.push(node(e[j].v, e[j].d));
                d[e[j].v] = e[j].d;
            }
    }
}